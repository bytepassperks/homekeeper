╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║                   📋 COPY THIS CODE TO SUPABASE NOW 📋                       ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝


WHERE TO PASTE THIS CODE
════════════════════════════════════════════════════════════════════════════════

1. Go to: https://supabase.com/dashboard/project/eoldzusfrveckbgdszld/functions

2. Click on the "server" function (if it exists)
   OR
   Click "+ New Edge Function" and name it "server"

3. DELETE ALL CODE in the editor (Ctrl+A then Delete)

4. COPY everything below the line that says "START HERE"

5. PASTE into the Supabase editor

6. Click "Deploy" button

7. Wait 30 seconds


═══════════════════════════════════════════════════════════════════════════════
START HERE ↓↓↓ COPY EVERYTHING BELOW THIS LINE ↓↓↓
═══════════════════════════════════════════════════════════════════════════════

import { Hono } from 'npm:hono@4';
import { cors } from 'npm:hono@4/cors';
import { logger } from 'npm:hono@4/logger';
import { createClient } from 'jsr:@supabase/supabase-js@2';

const app = new Hono();

// CORS - Allow all origins
app.use('*', cors({
  origin: '*',
  allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  exposeHeaders: ['Content-Length'],
  maxAge: 86400,
  credentials: true,
}));

app.use('*', logger());

// Handle OPTIONS preflight
app.options('*', (c) => c.text('', 204));

// KV Store Functions
const kvClient = () => createClient(
  Deno.env.get("SUPABASE_URL")!,
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
);

const kvSet = async (key: string, value: any) => {
  const { error } = await kvClient().from("kv_store_7627b83a").upsert({ key, value });
  if (error) throw new Error(error.message);
};

const kvGet = async (key: string) => {
  const { data, error } = await kvClient().from("kv_store_7627b83a").select("value").eq("key", key).maybeSingle();
  if (error) throw new Error(error.message);
  return data?.value;
};

const kvDel = async (key: string) => {
  const { error } = await kvClient().from("kv_store_7627b83a").delete().eq("key", key);
  if (error) throw new Error(error.message);
};

const kvGetByPrefix = async (prefix: string) => {
  const { data, error } = await kvClient().from("kv_store_7627b83a").select("key, value").like("key", prefix + "%");
  if (error) throw new Error(error.message);
  return data?.map((d) => d.value) ?? [];
};

// Helper functions
const getSupabaseAdmin = () => createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
);

const getSupabase = () => createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_ANON_KEY')!
);

const verifyAuth = async (authHeader: string | null) => {
  if (!authHeader) return { error: 'Unauthorized', userId: null };
  const accessToken = authHeader.split(' ')[1];
  const { data: { user }, error } = await getSupabase().auth.getUser(accessToken);
  if (error || !user?.id) return { error: 'Unauthorized', userId: null };
  return { error: null, userId: user.id };
};

// ========== ROUTES ==========

// Health check
app.get('/make-server-7627b83a/health', (c) => {
  return c.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// Signup
app.post('/make-server-7627b83a/signup', async (c) => {
  try {
    const { email, password, name } = await c.req.json();
    if (!email || !password || !name) {
      return c.json({ error: 'Email, password, and name are required' }, 400);
    }

    const { data, error } = await getSupabaseAdmin().auth.admin.createUser({
      email,
      password,
      user_metadata: { name },
      email_confirm: true
    });

    if (error) {
      console.log(`Registration error: ${error.message}`);
      return c.json({ error: error.message }, 400);
    }

    if (data.user) {
      await kvSet(`user:${data.user.id}:preferences`, {
        userId: data.user.id,
        emailNotifications: true,
        smsNotifications: false,
        reminderDays: 7,
        quietHoursStart: '22:00',
        quietHoursEnd: '08:00',
        currency: 'USD'
      });
    }

    console.log(`User registered: ${email}`);
    return c.json({ success: true, userId: data.user.id });
  } catch (err: any) {
    console.log(`Signup error: ${err.message}`);
    return c.json({ error: 'Registration failed' }, 500);
  }
});

// Create item
app.post('/make-server-7627b83a/items', async (c) => {
  try {
    const { error, userId } = await verifyAuth(c.req.header('Authorization'));
    if (error) return c.json({ error }, 401);

    const itemData = await c.req.json();
    const itemId = crypto.randomUUID();
    const now = new Date().toISOString();

    const item = {
      id: itemId,
      userId,
      ...itemData,
      createdAt: now,
      updatedAt: now
    };

    await kvSet(`user:${userId}:item:${itemId}`, item);

    try {
      const webhookUrl = await kvGet(`user:${userId}:webhook:new-item`);
      if (webhookUrl) {
        fetch(webhookUrl as string, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ item, userId })
        }).catch(() => {});
      }
    } catch (e) {}

    return c.json({ success: true, item });
  } catch (err: any) {
    console.log(`Create item error: ${err.message}`);
    return c.json({ error: 'Failed to create item' }, 500);
  }
});

// Get items
app.get('/make-server-7627b83a/items', async (c) => {
  try {
    const { error, userId } = await verifyAuth(c.req.header('Authorization'));
    if (error) return c.json({ error }, 401);

    const items = await kvGetByPrefix(`user:${userId}:item:`);
    return c.json({ items });
  } catch (err: any) {
    return c.json({ error: 'Failed to fetch items' }, 500);
  }
});

// Update item
app.put('/make-server-7627b83a/items/:itemId', async (c) => {
  try {
    const { error, userId } = await verifyAuth(c.req.header('Authorization'));
    if (error) return c.json({ error }, 401);

    const itemId = c.req.param('itemId');
    const updates = await c.req.json();
    const existingItem = await kvGet(`user:${userId}:item:${itemId}`);
    
    if (!existingItem) return c.json({ error: 'Item not found' }, 404);

    const updatedItem = {
      ...existingItem,
      ...updates,
      id: itemId,
      userId,
      updatedAt: new Date().toISOString()
    };

    await kvSet(`user:${userId}:item:${itemId}`, updatedItem);
    return c.json({ success: true, item: updatedItem });
  } catch (err: any) {
    return c.json({ error: 'Failed to update item' }, 500);
  }
});

// Delete item
app.delete('/make-server-7627b83a/items/:itemId', async (c) => {
  try {
    const { error, userId } = await verifyAuth(c.req.header('Authorization'));
    if (error) return c.json({ error }, 401);

    const itemId = c.req.param('itemId');
    await kvDel(`user:${userId}:item:${itemId}`);
    return c.json({ success: true });
  } catch (err: any) {
    return c.json({ error: 'Failed to delete item' }, 500);
  }
});

// Get maintenance records
app.get('/make-server-7627b83a/maintenance/:itemId', async (c) => {
  try {
    const { error, userId } = await verifyAuth(c.req.header('Authorization'));
    if (error) return c.json({ error }, 401);

    const itemId = c.req.param('itemId');
    const records = await kvGetByPrefix(`user:${userId}:item:${itemId}:maintenance:`);
    return c.json({ records });
  } catch (err: any) {
    return c.json({ error: 'Failed to fetch maintenance records' }, 500);
  }
});

// Create maintenance record
app.post('/make-server-7627b83a/maintenance', async (c) => {
  try {
    const { error, userId } = await verifyAuth(c.req.header('Authorization'));
    if (error) return c.json({ error }, 401);

    const data = await c.req.json();
    const recordId = crypto.randomUUID();
    const now = new Date().toISOString();

    const record = {
      id: recordId,
      userId,
      ...data,
      createdAt: now
    };

    await kvSet(`user:${userId}:item:${data.itemId}:maintenance:${recordId}`, record);

    try {
      const webhookUrl = await kvGet(`user:${userId}:webhook:maintenance-logged`);
      if (webhookUrl) {
        fetch(webhookUrl as string, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ record, userId })
        }).catch(() => {});
      }
    } catch (e) {}

    return c.json({ success: true, record });
  } catch (err: any) {
    return c.json({ error: 'Failed to create maintenance record' }, 500);
  }
});

// Get preferences
app.get('/make-server-7627b83a/preferences', async (c) => {
  try {
    const { error, userId } = await verifyAuth(c.req.header('Authorization'));
    if (error) return c.json({ error }, 401);

    const preferences = await kvGet(`user:${userId}:preferences`);
    return c.json({ preferences: preferences || {} });
  } catch (err: any) {
    return c.json({ error: 'Failed to fetch preferences' }, 500);
  }
});

// Update preferences
app.put('/make-server-7627b83a/preferences', async (c) => {
  try {
    const { error, userId } = await verifyAuth(c.req.header('Authorization'));
    if (error) return c.json({ error }, 401);

    const prefs = await c.req.json();
    await kvSet(`user:${userId}:preferences`, { ...prefs, userId });
    return c.json({ success: true, preferences: prefs });
  } catch (err: any) {
    return c.json({ error: 'Failed to update preferences' }, 500);
  }
});

// Get notifications
app.get('/make-server-7627b83a/notifications', async (c) => {
  try {
    const { error, userId } = await verifyAuth(c.req.header('Authorization'));
    if (error) return c.json({ error }, 401);

    const notifications = await kvGetByPrefix(`user:${userId}:notification:`);
    return c.json({ notifications });
  } catch (err: any) {
    return c.json({ error: 'Failed to fetch notifications' }, 500);
  }
});

// Get webhook logs
app.get('/make-server-7627b83a/webhook-logs', async (c) => {
  try {
    const { error, userId } = await verifyAuth(c.req.header('Authorization'));
    if (error) return c.json({ error }, 401);

    const logs = await kvGetByPrefix(`user:${userId}:webhook-log:`);
    return c.json({ logs });
  } catch (err: any) {
    return c.json({ error: 'Failed to fetch webhook logs' }, 500);
  }
});

// Find replacement webhook endpoint
app.post('/make-server-7627b83a/api/webhook/find-replacement', async (c) => {
  try {
    const data = await c.req.json();
    
    const logId = crypto.randomUUID();
    const log = {
      id: logId,
      endpoint: '/api/webhook/find-replacement',
      timestamp: new Date().toISOString(),
      status: 'success',
      message: 'Webhook received',
      data
    };

    if (data.userId) {
      await kvSet(`user:${data.userId}:webhook-log:${logId}`, log);
    }

    return c.json({ 
      success: true, 
      message: 'Replacement search triggered',
      replacementUrl: `https://example.com/replacement/${data.itemId}`
    });
  } catch (err: any) {
    return c.json({ error: 'Webhook processing failed' }, 500);
  }
});

// Default 404
app.notFound((c) => {
  return c.json({ error: 'Not found' }, 404);
});

Deno.serve(app.fetch);

═══════════════════════════════════════════════════════════════════════════════
END HERE ↑↑↑ STOP COPYING ↑↑↑
═══════════════════════════════════════════════════════════════════════════════


AFTER DEPLOYING, TEST HERE:
════════════════════════════════════════════════════════════════════════════════

https://eoldzusfrveckbgdszld.supabase.co/functions/v1/server/make-server-7627b83a/health

You should see:
{"status":"ok","timestamp":"2025-10-25T..."}


IF IT WORKS:
════════════════════════════════════════════════════════════════════════════════

✅ Go to: https://homekeeper-jfu0.onrender.com
✅ Click "Get Started"
✅ Register a new account
✅ Everything should work!


IF IT STILL DOESN'T WORK:
════════════════════════════════════════════════════════════════════════════════

1. Make sure you named the function "server" (lowercase, exactly)
2. Make sure you DELETED all old code before pasting
3. Make sure you clicked "Deploy" after pasting
4. Wait 30 seconds and try again
